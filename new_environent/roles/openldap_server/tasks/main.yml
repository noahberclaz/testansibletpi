# Nom du playbook : Installation d'une application web
# Auteur : Noah Berclaz
# Date : 24.04.2025
# Description : Ce playbook installe tout le nécéssaire pour l'application web cible

---
- name: Installer les paquets nécessaires
  apt:
    name:
      - debconf-utils
      - python3-ldap
      - libnss-ldapd
      - libpam-ldapd
    state: present
    update_cache: yes
    
- name: Générer le fichier preseed pour slapd
  copy:
    dest: /tmp/slapd.preseed
    content: |
      slapd   slapd/internal/generated_adminpw  password  {{ ldap_admin_password }}
      slapd   slapd/internal/adminpw            password  {{ ldap_admin_password }}
      slapd   slapd/password1                   password  {{ ldap_admin_password }}
      slapd   slapd/password2                   password  {{ ldap_admin_password }}
      slapd   slapd/domain                      string    {{ ldap_domain }}
      slapd   slapd/allow_ldap_v2               boolean   false
      slapd   slapd/no_configuration            boolean   false

- name: Injecter la préconfiguration dans debconf
  ansible.builtin.command:
    cmd: debconf-set-selections /tmp/slapd.preseed

- name: Installer slapd
  apt:
    name: slapd
    state: present
    force: yes
    update_cache: yes

- name: Fix permissions on slapd.d configuration dir
  become: yes
  file:
    path: /etc/ldap/slapd.d
    owner: openldap
    group: openldap
    recurse: yes
    mode: '0750'

- name: Vérifier le domaine
  assert:
    that:
      - ldap_domain.split('.') | length >= 2

- name: Démarrer slapd
  service:
    name: slapd
    state: started
    enabled: true

- name: Vérifier que slapd.d a les bonnes permissions
  file:
    path: /etc/ldap/slapd.d
    owner: openldap
    group: openldap
    recurse: yes
    mode: '0750'

- name: Démarrer et activer slapd
  service:
    name: slapd
    state: started
    enabled: true

- name: Créer une unité organisationnelle "users"
  community.general.ldap_entry:
    dn: "ou=users,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    objectClass:
      - organizationalUnit
    attributes:
      ou: users
    bind_dn: "cn=admin,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    bind_pw: "{{ ldap_admin_password }}"
    validate_certs: false

- name: Créer l’unité organisationnelle "groups" si absente
  community.general.ldap_entry:
    dn: "ou=groups,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    objectClass:
      - organizationalUnit
    attributes:
      ou: groups
    bind_dn: "cn=admin,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    bind_pw: "{{ ldap_admin_password }}"
    validate_certs: false

- name: Créer le groupe LDAP "user" si inexistant
  community.general.ldap_entry:
    dn: "cn=user,ou=groups,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    objectClass:
      - top
      - posixGroup
    attributes:
      cn: user
      gidNumber: "{{ user_gid }}"
    bind_dn: "cn=admin,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    bind_pw: "{{ ldap_admin_password }}"
    validate_certs: false

- name: Créer le groupe LDAP "ldapadmin" si inexistant
  community.general.ldap_entry:
    dn: "cn=ldapadmin,ou=groups,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    objectClass:
      - top
      - posixGroup
    attributes:
      cn: ldapadmin
      gidNumber: "{{ ldapadmin_gid }}"
    bind_dn: "cn=admin,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    bind_pw: "{{ ldap_admin_password }}"
    validate_certs: false

- name: Créer le groupe LDAP "sudoadmin" si inexistant
  community.general.ldap_entry:
    dn: "cn=sudoadmin,ou=groups,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    objectClass:
      - top
      - posixGroup
    attributes:
      cn: sudoadmin
      gidNumber: "{{ sudoadmin_gid }}"
    bind_dn: "cn=admin,dc={{ ldap_domain.split('.')[0] }},dc={{ ldap_domain.split('.')[1] }}"
    bind_pw: "{{ ldap_admin_password }}"
    validate_certs: false

- name: Autoriser sudoadmin à exécuter sudo sans mot de passe
  copy:
    dest: /etc/sudoers.d/sudoadmin
    content: "%sudoadmin ALL=(ALL) NOPASSWD:ALL\n"
    mode: '0440'

- name: Créer l'utilisateur adminldap
  user:
    name: adminldap
    shell: /bin/bash
    groups: sudo,admin
    append: yes
    create_home: yes
    state: present

- name: Définir le mot de passe pour adminldap
  user:
    name: adminldap
    password: "{{ admin_ldap_password | password_hash('sha512') }}"

- name: Créer le répertoire .ssh pour adminldap
  become: yes
  file:
    path: /home/adminldap/.ssh
    state: directory
    owner: adminldap
    group: adminldap
    mode: '0700'

- name: Ajouter la clé SSH pour adminldap
  become: yes
  copy:
    src: authorized_keys
    dest: /home/adminldap/.ssh/authorized_keys
    owner: adminldap
    group: adminldap
    mode: '0600'

- name: Configurer NSS pour LDAP
  lineinfile:
    path: /etc/nsswitch.conf
    regexp: '^({{ item.key }})\s+.*'
    line: '{{ item.key }}: files ldap'
    backrefs: yes
  loop:
    - { key: 'passwd' }
    - { key: 'group' }
    - { key: 'shadow' }

- name: Redémarrer les services critiques
  service:
    name: "{{ item }}"
    state: restarted
    enabled: true
  loop:
    - nslcd
    - ssh
    - slapd